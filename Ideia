1. Ordenar o arquivo desconsiderados.txt
2. Criar uma árvore B+ com as palavras dos outros arquivos.
2.1. Cada nó da árvore será uma struct Palavra definida assim:

struct{
char info[];
Dado dado[];
}typdef Palavra

struct{
int arquivo;
int frequencia;
}typedef Dado

Palavra guardará tanto a string encontrada em cada arquivo, bem como o arquivo e a frequência em Dado.

3.Processo de leitura:
3.1 Lê uma palavra em um dos arquivos de entrada;
3.2 Usa busca binária para verificar se a palavra está nos ignorados
3.3 Se não tiver, insire na árvore;
3.3.1 Se já existir um nó com a mesma info da nova palavra, então atualiza o vetor dado, colocando o arquivo e incrementando a frequência.

4. Quando todas as palavras tiverem sido lidas. Escreve a árvore B+ no arquivo final.
4.1 É preciso ordenar o array de Dado

5. Para fazer a consulta, basta usar busca binária no arquivo de índices ou na própria árvore.

//////////////////////////////////////////////////////

1. Entrar com os diretórios dos arquivos

2. Iniciar o FILE Desconsideradas
3. Construir uma árvore com as palavras desconsideradas

4. Inicar os arquivos a.txt, b.txt, c.txt
5. Usar o strtok() para dividir a string em partes
6. Pesquisar as saídas do strtok() na árvores de desconsideradas
    (Nó da arvore de arquivos):
        string palavra;
        vetor inteiro[0-qtd_arquivos]{
            0  1  2
            fA fB fC
        }
        Nó *esq, *dir;
    6.1. Se encontrar construa nova arvore/adicione um novo nó para a arvore dos arquivos a,b e c

7. printar o conteúdo dos nós em um novo arquivo: indice.txt

8. Iniciar o arquivo resposta.txt com '\n'
9. Pesquisar as palavras da consulta.txt na árvore (chaves)
    9.1 Caso encontre iniciar um vetor de ponteiros[qtd_palavras] que apontam para as palavras/chaves consultadas.

10. Comparar os conteúdos dos indices
    Se ambos forem diferentes de zero imprimir o nome do arquivo correspondete no resposta.txt

11. Voltar o ponteiro do arquivo pro inicio, e imprimir um contador dos arquivos imprimidos
    

